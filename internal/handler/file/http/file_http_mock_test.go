// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package http is a generated GoMock package.
package http

import (
	context "context"
	http1 "net/http"
	reflect "reflect"

	constant "github.com/assignment-amori/internal/constant"
	generic "github.com/assignment-amori/internal/entity/generic"
	http "github.com/assignment-amori/middleware/http"
	http0 "github.com/assignment-amori/pkg/http"
	whatsapp "github.com/assignment-amori/pkg/whatsapp"
	gomock "go.uber.org/mock/gomock"
)

// MockFileUC is a mock of FileUC interface.
type MockFileUC struct {
	ctrl     *gomock.Controller
	recorder *MockFileUCMockRecorder
}

// MockFileUCMockRecorder is the mock recorder for MockFileUC.
type MockFileUCMockRecorder struct {
	mock *MockFileUC
}

// NewMockFileUC creates a new mock instance.
func NewMockFileUC(ctrl *gomock.Controller) *MockFileUC {
	mock := &MockFileUC{ctrl: ctrl}
	mock.recorder = &MockFileUCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUC) EXPECT() *MockFileUCMockRecorder {
	return m.recorder
}

// WhatsappParser mocks base method.
func (m *MockFileUC) WhatsappParser(ctx context.Context, fileDetails http0.FileDetails) ([]whatsapp.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhatsappParser", ctx, fileDetails)
	ret0, _ := ret[0].([]whatsapp.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WhatsappParser indicates an expected call of WhatsappParser.
func (mr *MockFileUCMockRecorder) WhatsappParser(ctx, fileDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhatsappParser", reflect.TypeOf((*MockFileUC)(nil).WhatsappParser), ctx, fileDetails)
}

// MockhelperModule is a mock of helperModule interface.
type MockhelperModule struct {
	ctrl     *gomock.Controller
	recorder *MockhelperModuleMockRecorder
}

// MockhelperModuleMockRecorder is the mock recorder for MockhelperModule.
type MockhelperModuleMockRecorder struct {
	mock *MockhelperModule
}

// NewMockhelperModule creates a new mock instance.
func NewMockhelperModule(ctrl *gomock.Controller) *MockhelperModule {
	mock := &MockhelperModule{ctrl: ctrl}
	mock.recorder = &MockhelperModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhelperModule) EXPECT() *MockhelperModuleMockRecorder {
	return m.recorder
}

// APIModule mocks base method.
func (m *MockhelperModule) APIModule(module constant.Module) func(http1.Handler) http1.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIModule", module)
	ret0, _ := ret[0].(func(http1.Handler) http1.Handler)
	return ret0
}

// APIModule indicates an expected call of APIModule.
func (mr *MockhelperModuleMockRecorder) APIModule(module interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIModule", reflect.TypeOf((*MockhelperModule)(nil).APIModule), module)
}

// HandleHTTP mocks base method.
func (m *MockhelperModule) HandleHTTP(handlerName constant.HandlerID, typ constant.MiddlewareID, h generic.HTTPHandleFunc, mw ...http.MiddlewareExecutor) generic.HTTPHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{handlerName, typ, h}
	for _, a := range mw {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleHTTP", varargs...)
	ret0, _ := ret[0].(generic.HTTPHandler)
	return ret0
}

// HandleHTTP indicates an expected call of HandleHTTP.
func (mr *MockhelperModuleMockRecorder) HandleHTTP(handlerName, typ, h interface{}, mw ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{handlerName, typ, h}, mw...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHTTP", reflect.TypeOf((*MockhelperModule)(nil).HandleHTTP), varargs...)
}
