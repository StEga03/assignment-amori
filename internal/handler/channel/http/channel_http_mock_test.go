// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package http is a generated GoMock package.
package http

import (
	context "context"
	http0 "net/http"
	reflect "reflect"

	constant "github.com/assignment-amori/internal/constant"
	entity "github.com/assignment-amori/internal/entity"
	generic "github.com/assignment-amori/internal/entity/generic"
	http "github.com/assignment-amori/middleware/http"
	gomock "go.uber.org/mock/gomock"
)

// MockChannelUsecase is a mock of ChannelUsecase interface.
type MockChannelUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockChannelUsecaseMockRecorder
}

// MockChannelUsecaseMockRecorder is the mock recorder for MockChannelUsecase.
type MockChannelUsecaseMockRecorder struct {
	mock *MockChannelUsecase
}

// NewMockChannelUsecase creates a new mock instance.
func NewMockChannelUsecase(ctrl *gomock.Controller) *MockChannelUsecase {
	mock := &MockChannelUsecase{ctrl: ctrl}
	mock.recorder = &MockChannelUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelUsecase) EXPECT() *MockChannelUsecaseMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockChannelUsecase) CreateChannel(ctx context.Context, req entity.NewChannelUCRequest) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, req)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChannelUsecaseMockRecorder) CreateChannel(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelUsecase)(nil).CreateChannel), ctx, req)
}

// CreateMessageInChannel mocks base method.
func (m *MockChannelUsecase) CreateMessageInChannel(ctx context.Context, req entity.MessageUCRequest) (entity.MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageInChannel", ctx, req)
	ret0, _ := ret[0].(entity.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessageInChannel indicates an expected call of CreateMessageInChannel.
func (mr *MockChannelUsecaseMockRecorder) CreateMessageInChannel(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageInChannel", reflect.TypeOf((*MockChannelUsecase)(nil).CreateMessageInChannel), ctx, req)
}

// GetMessageInChannel mocks base method.
func (m *MockChannelUsecase) GetMessageInChannel(ctx context.Context, req entity.MessageUCRequest) ([]entity.MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageInChannel", ctx, req)
	ret0, _ := ret[0].([]entity.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageInChannel indicates an expected call of GetMessageInChannel.
func (mr *MockChannelUsecaseMockRecorder) GetMessageInChannel(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageInChannel", reflect.TypeOf((*MockChannelUsecase)(nil).GetMessageInChannel), ctx, req)
}

// MockhelperModule is a mock of helperModule interface.
type MockhelperModule struct {
	ctrl     *gomock.Controller
	recorder *MockhelperModuleMockRecorder
}

// MockhelperModuleMockRecorder is the mock recorder for MockhelperModule.
type MockhelperModuleMockRecorder struct {
	mock *MockhelperModule
}

// NewMockhelperModule creates a new mock instance.
func NewMockhelperModule(ctrl *gomock.Controller) *MockhelperModule {
	mock := &MockhelperModule{ctrl: ctrl}
	mock.recorder = &MockhelperModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhelperModule) EXPECT() *MockhelperModuleMockRecorder {
	return m.recorder
}

// APIModule mocks base method.
func (m *MockhelperModule) APIModule(module constant.Module) func(http0.Handler) http0.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIModule", module)
	ret0, _ := ret[0].(func(http0.Handler) http0.Handler)
	return ret0
}

// APIModule indicates an expected call of APIModule.
func (mr *MockhelperModuleMockRecorder) APIModule(module interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIModule", reflect.TypeOf((*MockhelperModule)(nil).APIModule), module)
}

// HandleHTTP mocks base method.
func (m *MockhelperModule) HandleHTTP(handlerName constant.HandlerID, typ constant.MiddlewareID, h generic.HTTPHandleFunc, mw ...http.MiddlewareExecutor) generic.HTTPHandler {
	m.ctrl.T.Helper()
	varargs := []interface{}{handlerName, typ, h}
	for _, a := range mw {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HandleHTTP", varargs...)
	ret0, _ := ret[0].(generic.HTTPHandler)
	return ret0
}

// HandleHTTP indicates an expected call of HandleHTTP.
func (mr *MockhelperModuleMockRecorder) HandleHTTP(handlerName, typ, h interface{}, mw ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{handlerName, typ, h}, mw...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleHTTP", reflect.TypeOf((*MockhelperModule)(nil).HandleHTTP), varargs...)
}
