// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package channel is a generated GoMock package.
package channel

import (
	context "context"
	reflect "reflect"

	entity "github.com/assignment-amori/internal/entity"
	consistency "github.com/assignment-amori/pkg/consistency"
	openai "github.com/sashabaranov/go-openai"
	gomock "go.uber.org/mock/gomock"
)

// MockconsistencyResource is a mock of consistencyResource interface.
type MockconsistencyResource struct {
	ctrl     *gomock.Controller
	recorder *MockconsistencyResourceMockRecorder
}

// MockconsistencyResourceMockRecorder is the mock recorder for MockconsistencyResource.
type MockconsistencyResourceMockRecorder struct {
	mock *MockconsistencyResource
}

// NewMockconsistencyResource creates a new mock instance.
func NewMockconsistencyResource(ctrl *gomock.Controller) *MockconsistencyResource {
	mock := &MockconsistencyResource{ctrl: ctrl}
	mock.recorder = &MockconsistencyResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconsistencyResource) EXPECT() *MockconsistencyResourceMockRecorder {
	return m.recorder
}

// RunAsUnit mocks base method.
func (m *MockconsistencyResource) RunAsUnit(ctx context.Context, action func(*consistency.ConsistencyElement) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAsUnit", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAsUnit indicates an expected call of RunAsUnit.
func (mr *MockconsistencyResourceMockRecorder) RunAsUnit(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAsUnit", reflect.TypeOf((*MockconsistencyResource)(nil).RunAsUnit), ctx, action)
}

// MockchannelResource is a mock of channelResource interface.
type MockchannelResource struct {
	ctrl     *gomock.Controller
	recorder *MockchannelResourceMockRecorder
}

// MockchannelResourceMockRecorder is the mock recorder for MockchannelResource.
type MockchannelResourceMockRecorder struct {
	mock *MockchannelResource
}

// NewMockchannelResource creates a new mock instance.
func NewMockchannelResource(ctrl *gomock.Controller) *MockchannelResource {
	mock := &MockchannelResource{ctrl: ctrl}
	mock.recorder = &MockchannelResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockchannelResource) EXPECT() *MockchannelResourceMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockchannelResource) CreateChannel(ctx context.Context, param entity.NewChannelParams, cel *consistency.ConsistencyElement) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, param, cel)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockchannelResourceMockRecorder) CreateChannel(ctx, param, cel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockchannelResource)(nil).CreateChannel), ctx, param, cel)
}

// GetByID mocks base method.
func (m *MockchannelResource) GetByID(ctx context.Context, id uint64) (entity.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockchannelResourceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockchannelResource)(nil).GetByID), ctx, id)
}

// GetByIDAndUserID mocks base method.
func (m *MockchannelResource) GetByIDAndUserID(ctx context.Context, id, userId uint64) (entity.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDAndUserID", ctx, id, userId)
	ret0, _ := ret[0].(entity.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDAndUserID indicates an expected call of GetByIDAndUserID.
func (mr *MockchannelResourceMockRecorder) GetByIDAndUserID(ctx, id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDAndUserID", reflect.TypeOf((*MockchannelResource)(nil).GetByIDAndUserID), ctx, id, userId)
}

// GetByUserID mocks base method.
func (m *MockchannelResource) GetByUserID(ctx context.Context, userId string) ([]entity.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userId)
	ret0, _ := ret[0].([]entity.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockchannelResourceMockRecorder) GetByUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockchannelResource)(nil).GetByUserID), ctx, userId)
}

// MockmessageResource is a mock of messageResource interface.
type MockmessageResource struct {
	ctrl     *gomock.Controller
	recorder *MockmessageResourceMockRecorder
}

// MockmessageResourceMockRecorder is the mock recorder for MockmessageResource.
type MockmessageResourceMockRecorder struct {
	mock *MockmessageResource
}

// NewMockmessageResource creates a new mock instance.
func NewMockmessageResource(ctrl *gomock.Controller) *MockmessageResource {
	mock := &MockmessageResource{ctrl: ctrl}
	mock.recorder = &MockmessageResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmessageResource) EXPECT() *MockmessageResourceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockmessageResource) CreateMessage(ctx context.Context, param entity.NewMessageParams, cel *consistency.ConsistencyElement) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, param, cel)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockmessageResourceMockRecorder) CreateMessage(ctx, param, cel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockmessageResource)(nil).CreateMessage), ctx, param, cel)
}

// CreateMessageBulk mocks base method.
func (m *MockmessageResource) CreateMessageBulk(ctx context.Context, param []entity.NewMessageParams, cel *consistency.ConsistencyElement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageBulk", ctx, param, cel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessageBulk indicates an expected call of CreateMessageBulk.
func (mr *MockmessageResourceMockRecorder) CreateMessageBulk(ctx, param, cel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageBulk", reflect.TypeOf((*MockmessageResource)(nil).CreateMessageBulk), ctx, param, cel)
}

// CreateMessageInput mocks base method.
func (m *MockmessageResource) CreateMessageInput(ctx context.Context, param entity.NewMessageInputParams, cel *consistency.ConsistencyElement) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageInput", ctx, param, cel)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessageInput indicates an expected call of CreateMessageInput.
func (mr *MockmessageResourceMockRecorder) CreateMessageInput(ctx, param, cel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageInput", reflect.TypeOf((*MockmessageResource)(nil).CreateMessageInput), ctx, param, cel)
}

// CreateMessageSource mocks base method.
func (m *MockmessageResource) CreateMessageSource(ctx context.Context, param []entity.NewMessageSourceParams, cel *consistency.ConsistencyElement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessageSource", ctx, param, cel)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessageSource indicates an expected call of CreateMessageSource.
func (mr *MockmessageResourceMockRecorder) CreateMessageSource(ctx, param, cel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessageSource", reflect.TypeOf((*MockmessageResource)(nil).CreateMessageSource), ctx, param, cel)
}

// GetMessageByChannelID mocks base method.
func (m *MockmessageResource) GetMessageByChannelID(ctx context.Context, param entity.GetMessageParams) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByChannelID", ctx, param)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByChannelID indicates an expected call of GetMessageByChannelID.
func (mr *MockmessageResourceMockRecorder) GetMessageByChannelID(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByChannelID", reflect.TypeOf((*MockmessageResource)(nil).GetMessageByChannelID), ctx, param)
}

// GetMessageByID mocks base method.
func (m *MockmessageResource) GetMessageByID(ctx context.Context, param entity.GetMessageParams) (entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", ctx, param)
	ret0, _ := ret[0].(entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockmessageResourceMockRecorder) GetMessageByID(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockmessageResource)(nil).GetMessageByID), ctx, param)
}

// GetMessageInputByChannelID mocks base method.
func (m *MockmessageResource) GetMessageInputByChannelID(ctx context.Context, param entity.GetMessageParams) ([]entity.MessageInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageInputByChannelID", ctx, param)
	ret0, _ := ret[0].([]entity.MessageInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageInputByChannelID indicates an expected call of GetMessageInputByChannelID.
func (mr *MockmessageResourceMockRecorder) GetMessageInputByChannelID(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageInputByChannelID", reflect.TypeOf((*MockmessageResource)(nil).GetMessageInputByChannelID), ctx, param)
}

// GetMessageInputByID mocks base method.
func (m *MockmessageResource) GetMessageInputByID(ctx context.Context, param entity.GetMessageInputParams) (entity.MessageInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageInputByID", ctx, param)
	ret0, _ := ret[0].(entity.MessageInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageInputByID indicates an expected call of GetMessageInputByID.
func (mr *MockmessageResourceMockRecorder) GetMessageInputByID(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageInputByID", reflect.TypeOf((*MockmessageResource)(nil).GetMessageInputByID), ctx, param)
}

// GetMessageSourceByID mocks base method.
func (m *MockmessageResource) GetMessageSourceByID(ctx context.Context, param entity.GetMessageSourceParams) (entity.MessageSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageSourceByID", ctx, param)
	ret0, _ := ret[0].(entity.MessageSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageSourceByID indicates an expected call of GetMessageSourceByID.
func (mr *MockmessageResourceMockRecorder) GetMessageSourceByID(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageSourceByID", reflect.TypeOf((*MockmessageResource)(nil).GetMessageSourceByID), ctx, param)
}

// GetMessageSourceByMessageInputID mocks base method.
func (m *MockmessageResource) GetMessageSourceByMessageInputID(ctx context.Context, param entity.GetMessageSourceParams) ([]entity.MessageSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageSourceByMessageInputID", ctx, param)
	ret0, _ := ret[0].([]entity.MessageSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageSourceByMessageInputID indicates an expected call of GetMessageSourceByMessageInputID.
func (mr *MockmessageResourceMockRecorder) GetMessageSourceByMessageInputID(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageSourceByMessageInputID", reflect.TypeOf((*MockmessageResource)(nil).GetMessageSourceByMessageInputID), ctx, param)
}

// MockopenaiResource is a mock of openaiResource interface.
type MockopenaiResource struct {
	ctrl     *gomock.Controller
	recorder *MockopenaiResourceMockRecorder
}

// MockopenaiResourceMockRecorder is the mock recorder for MockopenaiResource.
type MockopenaiResourceMockRecorder struct {
	mock *MockopenaiResource
}

// NewMockopenaiResource creates a new mock instance.
func NewMockopenaiResource(ctrl *gomock.Controller) *MockopenaiResource {
	mock := &MockopenaiResource{ctrl: ctrl}
	mock.recorder = &MockopenaiResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockopenaiResource) EXPECT() *MockopenaiResourceMockRecorder {
	return m.recorder
}

// CreateChatCompletion mocks base method.
func (m *MockopenaiResource) CreateChatCompletion(ctx context.Context, param entity.ChatCompletionParams) (openai.ChatCompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatCompletion", ctx, param)
	ret0, _ := ret[0].(openai.ChatCompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatCompletion indicates an expected call of CreateChatCompletion.
func (mr *MockopenaiResourceMockRecorder) CreateChatCompletion(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatCompletion", reflect.TypeOf((*MockopenaiResource)(nil).CreateChatCompletion), ctx, param)
}

// MockuserResource is a mock of userResource interface.
type MockuserResource struct {
	ctrl     *gomock.Controller
	recorder *MockuserResourceMockRecorder
}

// MockuserResourceMockRecorder is the mock recorder for MockuserResource.
type MockuserResourceMockRecorder struct {
	mock *MockuserResource
}

// NewMockuserResource creates a new mock instance.
func NewMockuserResource(ctrl *gomock.Controller) *MockuserResource {
	mock := &MockuserResource{ctrl: ctrl}
	mock.recorder = &MockuserResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserResource) EXPECT() *MockuserResourceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockuserResource) CreateMessage(ctx context.Context, param entity.NewUserParams, cel *consistency.ConsistencyElement) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, param, cel)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockuserResourceMockRecorder) CreateMessage(ctx, param, cel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockuserResource)(nil).CreateMessage), ctx, param, cel)
}

// GetByID mocks base method.
func (m *MockuserResource) GetByID(ctx context.Context, id uint64) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserResourceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserResource)(nil).GetByID), ctx, id)
}

// MocksonyFlakeResource is a mock of sonyFlakeResource interface.
type MocksonyFlakeResource struct {
	ctrl     *gomock.Controller
	recorder *MocksonyFlakeResourceMockRecorder
}

// MocksonyFlakeResourceMockRecorder is the mock recorder for MocksonyFlakeResource.
type MocksonyFlakeResourceMockRecorder struct {
	mock *MocksonyFlakeResource
}

// NewMocksonyFlakeResource creates a new mock instance.
func NewMocksonyFlakeResource(ctrl *gomock.Controller) *MocksonyFlakeResource {
	mock := &MocksonyFlakeResource{ctrl: ctrl}
	mock.recorder = &MocksonyFlakeResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksonyFlakeResource) EXPECT() *MocksonyFlakeResourceMockRecorder {
	return m.recorder
}

// NextID mocks base method.
func (m *MocksonyFlakeResource) NextID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextID indicates an expected call of NextID.
func (mr *MocksonyFlakeResourceMockRecorder) NextID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextID", reflect.TypeOf((*MocksonyFlakeResource)(nil).NextID))
}
